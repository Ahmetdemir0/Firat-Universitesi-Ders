16541055-Ferhat KORKUTATA

Bana göre nesne tabanlı programlama kavramının,açıklanabilmesi ve anlaşılabilmesi için öncelikle nesne kavramından bahsetmedilmesi gerekmektedir.Nesne, içinde veri saklayan ve bu veriler üzerinde işlem yapacak metotlar bulunduran bileşenlerdir.Nesne tabanlı programlamanın çıkmasındaki temel mantık günlük hayatta ki en basit probleme çözüm bulabiliyor olması ve  nesnelerin tekrar kullanılabiliyor olmasıdır.Nesnelerin tekrar kullanılabiliyor olması bütün programcıların işini kolaylaştırabilir hale getirmektedir.Nesneye yönelik programlamada nesne oluşturma bir sınıf içerisinde yapılır ve kodlar başka sınıflarda kullanılabilir.Böyle bir özelliğin olması daha az kod ile daha fazla iş yapma imkanı sağlamaktadır . Nesneye yönelik programlamanın sağladığı avantajlara çok daha hızlı ve kolay bir şekilde kodlama imkanı eklenebilir.Nesneye yönelik programlamayı yazılım diliyle günlük hayata göre açıklamak istersek , günlük hayatta karşılaştığımız soyut bir probleme oluşturduğumuz bir sınıfla ve bu sınıftan oluşturduğumuz nesneler ile kod yoluyla çözüm bulmak olarak tanımlanabilir.Buna örnek verecek olursak insanı bir nesne olarak düşünür ve sınıf olarak soyutlarsak insanın ilk akla gelen özellikleri boy ,kilo ,cinsiyet vb. özellikleri olabilir.Bu özelliklerin değerleri doğal olarak her insan için farklı olabilmektedir.Bu örnekle biz aslında farkında olmadan günlük hayatta insan isimli bir sınıf oluşturmuş ve bu sınıfa boy,kilo ve cinsiyet gibi özellikleri atamış bulunmaktayız.İnsan sınıfı için tanımlayacağımız metotlar ise yürüme , konuşma , uyuma vb. metotlar olabilir.Bu örneğimizle günlük hayattaki soyut olan insan kavramına belirli özellikler ve metotlar atanarak bu kavramın nesneye yönelik programlamayla çözümü sağlanmış bulunmaktadır.Bir programcı yada yazılımcı açısından nesneye yönelimli programlamayı açıklayacak olursak , bir sınıf için tanımlanan 4 temel özellikten birini sağlamasıdır.Bu 4 temel özelliklerden birini sağlamayan programlama dili nesneye yönelik programlama dili olarak sınıflandırılamaz.Bu özellikler Soyutlama , Encapsulation , Miras Alma (Inheritance),Çok Biçimlilik (Polymorphism)'dir.Bu kavramlar nesneye yönelik programlamanın daha iyi anlaşılması için aşağıda açıklanacaktır.Ayrıca nesneye yönelik programlama da nesneler birbirinden bağımsız olarak tanımlandığı için başka nesnelerin bu nesnelere erişebilmesi engellenebilmektedir.Basit olarak nesneye yönelik programlama , nesnelerin birbirleriyle olan iletişimi ve iletişimi  gerçekleştiren yapılar olarak tanımlanabilir.

Nesne Yönelimli Programlamada 4 temel özellik :
1.) Soyutlama(Abstraction):
 İletişim beraberinde “nesnelerin birbirine bağımlılığı” sorununu getirir. Programcı için burada çözüm soyutlamayı sağlamaktır. Soyutlama, kapsüllemenin doğal bir uzantısı olarak düşünülebilir. Nesneye yönelik tasarımda, programlar genellikle fazla büyüktür. Bu durumda ayrı nesneler birbirleriyle çok fazla iletişim kurar. Bu yüzden yıllarca böyle büyük bir kod tabanını korumak da yol boyunca değişiklik yapmak da zordur. Soyutlama, işte bu ürkütücü sorunu hafifletmeyi amaçlayan bir kavramdır.
 Soyutlamayı uygulamak, her nesnenin yalnızca onu kullanmak için üst düzey bir mekanizmayı ortaya çıkarması gerektiği anlamına gelir. Bu mekanizma, içinde uygulama ayrıntılarını saklamalıdır. Böylece, sadece diğer nesnelerle ilgili işlemleri göstermelidir.
 Bir masaüstü bilgisayarı düşünelim. Kasanın içerisinde birbirinden farklı işlevlere sahip onlarca donanım bulunur. Bilgisayarın açma düğmesine bastığınızda sesler çıkmaya başlar, birçok donanım faaliyete geçer ve birkaç saniye içerisinde monitörünüzde masaüstü uygulamalarına erişmiş olursunuz. Size düşen yalnızca bir düğmeye basmaktır. Düğmenin altında ne olup bittiği hakkında bir bilgiye sahip değilsinizdir. Ne olup bittiğini bilmenize gerek kalmadan, işleminizi gerçekleştirebilirsiniz.

2.)Kapsülleme (Encapsulation):
 Diyelim ki bir programımız var. Programda tanımlanan kurallara göre birbirleriyle iletişim kuran birkaç farklı mantıksal nesneye sahibiz. Kapsüllemede her nesne kendi özel durumunu bir sınıf içinde tutar. Diğer nesnelerin bu duruma doğrudan erişimi yoktur. Bunun yerine, yalnızca ortak işlevlerin bir listesini  yöntemler ile çağırırlar. Böylece nesne kendi durumunu yöntemlerle yönetir. Açıkça izin verilmedikçe başka hiçbir sınıf ona dokunamaz. Nesne ile iletişim kurmak istiyorsanız, sağlanan yöntemleri kullanmanız şarttır. Ancak, varsayılan olarak, durumu değiştiremezsiniz.
 

3.)Miras Alma (Inheritance):
 Kapsülleme ve soyutlamanın kod temeli geliştirme ve korumada programcıya nasıl yardımcı olduğunu gördük. Şimdiye kadar her şey kusursuz görünüyor. Peki, nesne tabanlı programlama işlemlerinin tümünde görülen “nesnelerin birbirine benzerliği” sorununa nasıl çözüm getirilir? nesne yönelimli programlama tasarımında ortak bir sorunun ne olduğunu biliyor musunuz?
 Evet, nesneler genelde birbirine çok benzer ve ortak mantığa sahiptirler. Ancak tamamen aynı değillerdir. Öyleyse ortak mantığı tekrar nasıl kullanırız ve benzersiz mantığı ayrı bir sınıfa nasıl çıkarırız? Bunu başarmak için kalıtım yolunu kullanırız.  Başka bir ebeveyn sınıftan türeterek alt bir sınıf oluştururuz. Bu şekilde bir hiyerarşi oluştururuz. Böylece alt sınıf, ana sınıfın tüm alanlarını ve yöntemlerini yeniden kullanır ve kendi benzersiz bölümünü uygular.

4.)Çok biçimlilik (Polymorphism):
 Diyelim ki ebeveyn sınıfımız ve ondan kalan birkaç alt sınıfımız var. Tüm bu sınıfların bir karışımını içeren bir koleksiyonu, örneğin bir listeyi, kullanmak istiyoruz. Ya da ebeveyn sınıfı için uygulanmış bir yöntemimiz var ve bunu alt sınıflar için de kullanmak istiyoruz. Bu noktada imdada çok biçimlilik (polimorfizm) yetişir.
 Çok biçimlilik alt sınıfları kendi yöntemlerini koruyarak ebeveyn sınıfı gibi kullanmanın yolunu açar. Bu, genellikle yeniden kullanılacak bir ana ara yüz tanımlayarak olur. Bu ara yüz bir çok ortak yöntemi içinde barındırır. Sonra, her bir alt sınıf bu yöntemlerin kendi versiyonunu uygular.

 Nesne yönelimli olan nesne tabanlı programlama diline örnek vermek istersek ,ABAP/4, C#, C++ (nesne modeli Simula'ya dayanır), Eiffel, Java, Object Pascal, Objective-C (nesne modeli Simula'ya dayanır), PHP, Python, REALbasic (nesne yönelimli bir BASIC lehçesi), Ruby, Simula, Smalltalk ve Visual Basic .NET'i örnek olarak verebiliriz.